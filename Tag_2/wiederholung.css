/* Ein Kommentar, Mehrzeilig */

/* Syntax:

    selektor {
        attribut: wert;
        attribut2: wert;
    }

    Universalselektor *
        Stylt alle Elemente

    Elementselektor p {}
        Stylt dementsprechend alle p's

    Klassensektor .klassenNamen {}
        Stylt alle Elemente die Teil der Klasse sind

    Idselektor #idNamen {}
        Stylt das Element mit der entsprechenden Id

*/

* {
    /* Color = Schriftfarbe */
    color: #fff;

    /* Background-color = Hintergrundfarbe */
    background-color: #000;
}

p {
    color: grey;
}

h2 {
    color: grey;
}

.klasse {
    color: grey;
}

#id {
    color: grey;
}

td, th {
    color: green;
}

/* 
    Advanced Selectors:

    Gruppen Selector: element1, element2, element3 ..... {} -> group-selector

    Direkte Geshwister-Selektor: element1 + element2 {} -> adjacent sibling selector

    Allgemeine Geschwister-Selektor: element1 ~ element2 {} General sibling selector

    Allgemeiner Nachfahren-Selektor: element1 element2 {} General descendant selector
        Stylt alle Nachfahren, egal wie weit sie verschachtelt sind

    Direkt Nachfahren-Selektor: element1 > element2 {} Child-Selector

    Id/Klassen kombinieren: element.Klasse {}
                            element#id {}
*/

p + h2 {
    text-decoration: underline;
} 

h1 ~ h2 {
    text-decoration: overline;
    /* Überschreibt die Regel direkt darüber, da sie gleich spezifisch sind und somit die letzte definierte Regel gilt */
}

ul > li {
    color: brown;
}

h1.klasse {
    font-size: 40px;
}

/* Größeneinheiten in CSS */

/* Absoluten Einheiten */
/*
    px, Pixel | 1/96 inch
    in, Inch | ca 2,5 cm
    pt, Point | 1/72 inch
    pc, Pica | 12 pt
    mm, milimeter
    cm, centimeter

    Werden nicht mehr so häufig verwendet, da sie immer die selbe Größe haben
*/

/* Relativen Einheiten */
/*
    em, element Relativ zur Schriftgröße des Elements, d.h 2em entsprechen der doppelten Schriftgröße des Elements
    rem, Relativ zur Schriftgröße des root-Elements (html)
    vw, Relativ zu 1% der breite des Viewports (Browserfenster)
    vh, Relativ zu 1% der höhe des Viewports (Browserfenster)
    %, Relativ zur Größe des Elternelements
*/

/* 
    Das Box-Modell
    Von innen nach außen in mehrere Unterblöcke aufgeteilt:
        Content- der tatsächliche Inhalt z.B Text oder Bild des Elements
            Größe des COntents kann mit height und width angepasst werden
        Padding - transparenter Abstand zwischen Content und Border wird mit setzen von Background-color eingefärbt
        => zählt als Teil des Elements
        Border - Grenze um das Padding, kann beliebig gefärbt und breite der Balken angepasst werden (im bsp. 10px)
        Margin - Transparenter Rand um die Border herum, dieser wird nicht von background-color eingefärbt
*/

div {
    height: 50px;
    background-color: red;
    padding: 10px;
    border: 10px blue;
    border-style: solid;
    border-radius: 20px;
    border-collapse: collapse; /* Setzt den zwischenraum auf "Überlappend" (z.B bei einer Tabelle die Zellen Abstände sind 0) */

}

/* HTML Seite dazu anfertigen und das ganze Stylen mit <style> */
/* Hand heben in Teams, falls fertig */
table, td, th {
    border: 1px solid black;
    border-collapse: collapse;
}

/* Display Arten von CSS */

/*
    display: block; (Basis: div)
    Beginnen immer in einer neuen Zeile und beanspruchen die volle Breite des Elternelementes
    !!! Beachten height und width !!!

    display: inline; (Basis: span)
    Starten nicht zwingend in einer neuen Zeile und beanspruchen nur so viel Platz wie nötig

    display: none; (Keine Basis)    (Das Beispiel was wir gemacht haben mit www.innsalzach24.de)
    Versteckt das Element und die Seite verhält sich so als ob das Element nicht existieren würde
    PS: Wird oft in Kombination mit JavaScript benutzt, um Elemente zu verstecken
*/

/* Positions in CSS */
/*
    position: static;
    Jedes HTML Element ist standardmäßig static,
    Element wird statisch platziert und ignoriert jegliche Positionsbeeinflussende Attribute wie z.B top, bottom, right, left
    Position richtet sich nach Aufbau des HTML Codes

    position: relative;
    Beachtet die positionsbeeinflussenden Attribute wie top, bottom, left und right
    Element verschiebt sich relativ zu seiner Standardposition
    Andere Elemente nehmen nicht den Ursprünglichen Platz des Elementes ein

    position: fixed;
    Beachtet top, bottom, left und right
    Element verschiebt sich relativ zum Sichtfeld

    position: absolute;
    Funktioniert ähnlich wie fixed, aber verschiebt sich nicht relativ zum Sichtfeld, sondern relativ zum nächsten Vorfahren der relative
    oder absolute als position hat
    Falls kein Vorfahr relative oder absolute hat, wird es in Relation zum html-Tag verschoben
*/

#idContainer {
    height: 50px;
    background-color: rebeccapurple;
    position: relative;
}

#idContainer {
    background-color: red;
    position: fixed;
    bottom: 50px;
}